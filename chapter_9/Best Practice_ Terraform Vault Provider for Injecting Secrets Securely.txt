Hello, folks!
Welcome to this lesson on best practices using Terraform Vault Provider
to secure sensitive data during your Terraform deployments. So,
let's talk about what HashiCorp Vault really is.
HashiCorp Vault is a secrets management software.
It is used to store sensitive data securely and provide short-lived,
temporary credentials to users in place of actual long-lived credentials,
like AWS CLI access keys.
In the backend,
Vault handles rotating these temporarily provided credentials as per an
expiration schedule, which is configurable in Vault.
It can also generate cryptographic keys to encrypt data at rest and while in
transit.
Access to encrypted data inside Vault can be controlled via fine-grained ACLs
within Vault. More examples of the kind of data that Vault can store, encrypt,
and work with are secrets like usernames and passwords,
database credentials, API tokens, and TLS certificates,
just to name a few. Now, why do we need Vault, really?
Usually, as we build complex secure applications and networks,
we experience something called credentials sprawl,
where some of the credentials might be in a plain text file,
others inside a database or even configuration files,
which opens up attack surface as well as increased probability of mismanagement
of those secrets. With Vault,
you can get all the secrets and can centrally manage access to them,
in addition to integrating with Terraform and other popular cloud vendors.
Now, let's look at the workflow of how Vault can be used to inject secrets into
Terraform during a deployment, on the fly.
So, imagine in this scenario,
that you're deploying to AWS and want to use Vault to inject the CLI access
keys for the deployment.
The first step would be for the Vault Admin to provision ACLs and long-lived
credentials in Vault. And,
thanks to Vault's integration with AWS Identity and Access Management service,
it will take care of generating temporary,
short-lived credentials with toned down permissions to the users which are
invoking those keys. In the next step,
you as the user integrate Vault within your Terraform code using the Vault
Provider. Now,
the Vault Provider is just like any other Terraform provider that you may have
come across. It just helps configure Vault with Terraform,
so that secrets can be passed back to Terraform securely.
With the Vault integration in place and your code ready for deployment,
you can issue the 'terraform apply' command.
Terraform will reach out to the Vault server configured via the Vault Provider
and inquire about the credentials that it needs to go through with the
deployment. Vault will check the ACLs and permissions and return
temporary,
short-lived credentials with appropriate AWS IAM permissions to the user
invoking the deployment. Using the credentials given back by Vault,
Terraform will proceed with the deployment and execute it.
As soon as Vault had returned temporary credentials to Terraform,
it had started a configurable expiration timer for the temp keys,
which will expire the keys to render those temporary credentials useless,
and a new set of temporary credentials will need to be generated for the next
deployment.
So now that we've looked at the usage of Vault Provider to inject secrets into
Terraform, let's summarize its benefits.
Developers and end users don't need long-lived
credentials on their machines,
and hence don't open up larger attack surface areas. In short,
developers don't have access to actual secrets -- only short-lived credentials,
with only the permissions that they require.
The temporary credentials are short-lived and deleted soon.
So they are only generated when required and then deleted.
And even though your long-lived credentials that are stored in Vault can have
less restricted access to resources,
you can still configure Vault to hand out more restrictive permissions to
temporary keys, which are generated in lieu of those long-lived keys.
Vault is pretty flexible. It offers a user interface, CLI- and API-based access,
and also has an Enterprise offering for large organizations,
which allows for distributed Vault deployments and high availability.
Our main takeaway from this lesson with regards to the exam objective,
is that Vault allows for storing your secrets in a centralized way and allows
you to provide both temporary credentials for usage in your deployments,
as well as provide encryption of data at rest and in transit.
Thank you for going through this lesson.