Hello, folks.
And welcome to this lesson
on understanding some of the most popular commands
that you're going to be using
if you're ever going to work for Terraform.
Coming in at number 1,
we have Terraform init.
It's the inception of all the providers,
plugins, and modules that your Terraform code
needs to create resources.
And you won't be able to deploy anything
without executing this command first.
It initializes your Terraform project's working folder,
and downloads the required plugins
from the appropriate registry or repository.
And I'll again emphasize the point
that you can't deploy without having first run this command.
That's quite important to note.
This command sets up the backend
for storing your Terraform state files as well.
It restricts the state of deployment
either locally or remotely.
And it is safe to run this command,
as it doesn't modify, delete, or update
any Terraform code.
Though it does update plugins' providers
which your Terraform code might be using.
A command to organize and beautify your Terraform template
is Terraform format.
As the name implies,
it's going to format your code to keep it consistent
by checking the formatting against compliance standards.
And it is a good thing to run if your teams
are working on the same project
and pushing to version control systems, such as Git.
This command is also safe to run
at any stage of the project.
It will only arrange your Terraform code in place,
but will not modify the actual code.
Up next, we have got Terraform validate.
As the name implies,
Terraform validate checks your Terraform code
for syntax mistakes and internal consistency,
for example, typos and misconfigured resources,
where a parameter might be wrong in a given resource.
This command depends on Terraform init being run
at least once before it can execute.
Otherwise, it'll error out.
And also, this command is safe to run at any time,
as it only makes recommendations, warnings,
and outputs errors in your Terraform code.
Next, we've got the Terraform plan command.
This is the command you'll find yourself executing a lot.
Terraform plan creates the plan of action
for Terraform to act on.
It tests connectivity to provider APIs
using the credentials that you provide.
It also refreshes the state of the resources.
It does this by calculating the delta
between the current and the desired state,
which is defined in the Terraform code.
This is kind of a fail-safe
before you actually execute the code
to create real resources.
So use it often.
And finally, the execution plan can be saved to a file
using the -out flag.
However, it will not hide any sensitive information
being passed in the code,
and will store that in plain text.
This execution plan can be directly passed
to a Terraform apply command,
which we'll talk about in a moment,
as it helps save time, so that it doesn't go ahead
and create the state of the resources defined in the code
every single time.
And finally, the big red button, which is the most popular
yet authoritative command when working with Terraform:
Terraform apply.
It applies the changes as suggested by the execution plan.
And by default, it will prompt you one last time
before creating real resources,
for which you'll need to type "Yes" explicitly,
or change the behavior by passing an optional flag
so that you're not prompted.
By default, Terraform apply will show
the current execution strategy
if it is not being passed a file
containing the execution plan,
which shows all the modifications.
That is, creation, deletion, and update of resources
that is needed to achieve the required state
defined in the code.
So this rounds up some of the popular Terraform commands
that you'll find me using throughout this course,
and which you'll grow accustomed to yourself as well.
Thank you for going through this lesson.
Now, if you've got time, join me in the next lesson.